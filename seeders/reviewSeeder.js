import { faker } from '@faker-js/faker/locale/vi';
import { sequelize } from '../config/database.js';
import ProductReview from '../models/ProductReview.js';
import ProductReviewImage from '../models/ProductReviewImage.js';
import ProductReviewReply from '../models/ProductReviewReply.js';
import Product from '../models/Product.js';
import User from '../models/User.js';

// T·∫°o d·ªØ li·ªáu gi·∫£ cho review
const generateReviews = (productIds, userIds, reviewsPerProduct = 5) => {
  const reviews = [];
  const reviewTitles = [
    'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët',
    'ƒê√°ng mua, gi√° c·∫£ h·ª£p l√Ω',
    'Ch·∫•t l∆∞·ª£ng nh∆∞ m√¥ t·∫£',
    'Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n',
    'S·∫£n ph·∫©m ƒë·∫πp, ph√π h·ª£p',
    'Ch·∫•t l∆∞·ª£ng v∆∞·ª£t mong ƒë·ª£i',
    'ƒê√°ng ti·ªÅn, s·∫Ω mua l·∫°i',
    'S·∫£n ph·∫©m t·ªët, d·ªãch v·ª• t·ªët',
    'Ch·∫•t l∆∞·ª£ng ·ªïn ƒë·ªãnh',
    'S·∫£n ph·∫©m nh∆∞ h√¨nh',
    'Giao h√†ng ƒë√∫ng h·∫πn',
    'Ch·∫•t l∆∞·ª£ng cao c·∫•p',
    'ƒê√≥ng g√≥i ƒë·∫πp, s·∫£n ph·∫©m t·ªët',
    'Gi√° c·∫£ ph·∫£i chƒÉng',
    'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng',
    'D·ªãch v·ª• kh√°ch h√†ng t·ªët',
    'S·∫£n ph·∫©m ƒë√∫ng m√¥ t·∫£',
    'Ch·∫•t l∆∞·ª£ng t·ªët, gi√° h·ª£p l√Ω',
    'ƒê√°ng tin c·∫≠y',
    'S·∫£n ph·∫©m xu·∫•t s·∫Øc'
  ];

  const reviewContents = [
    'S·∫£n ph·∫©m r·∫•t ƒë·∫πp v√† ch·∫•t l∆∞·ª£ng t·ªët. ƒê√≥ng g√≥i c·∫©n th·∫≠n, giao h√†ng nhanh. R·∫•t h√†i l√≤ng v·ªõi tr·∫£i nghi·ªám mua s·∫Øm n√†y.',
    'Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m v∆∞·ª£t mong ƒë·ª£i. Gi√° c·∫£ h·ª£p l√Ω so v·ªõi ch·∫•t l∆∞·ª£ng. S·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®.',
    'S·∫£n ph·∫©m ƒë√∫ng nh∆∞ m√¥ t·∫£ tr√™n website. Ch·∫•t l∆∞·ª£ng t·ªët, giao h√†ng ƒë√∫ng h·∫πn. C·∫£m ∆°n shop.',
    'ƒê√≥ng g√≥i r·∫•t c·∫©n th·∫≠n, s·∫£n ph·∫©m kh√¥ng b·ªã h·ªèng. Ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ ph·∫£i chƒÉng.',
    'Giao h√†ng nhanh, nh√¢n vi√™n th√¢n thi·ªán. S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng nh∆∞ mong ƒë·ª£i.',
    'S·∫£n ph·∫©m ƒë·∫πp, ph√π h·ª£p v·ªõi m√¥ t·∫£. Ch·∫•t l∆∞·ª£ng t·ªët, s·∫Ω mua l·∫°i trong t∆∞∆°ng lai.',
    'R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m. Ch·∫•t l∆∞·ª£ng cao, gi√° c·∫£ h·ª£p l√Ω. D·ªãch v·ª• kh√°ch h√†ng t·ªët.',
    'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët, ƒë√∫ng nh∆∞ h√¨nh ·∫£nh. Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n.',
    'Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m xu·∫•t s·∫Øc. Gi√° c·∫£ ph·∫£i chƒÉng, d·ªãch v·ª• t·ªët. ƒê√°ng mua.',
    'S·∫£n ph·∫©m ƒë·∫πp v√† ch·∫•t l∆∞·ª£ng. Giao h√†ng ƒë√∫ng h·∫πn, nh√¢n vi√™n nhi·ªát t√¨nh.',
    'R·∫•t th√≠ch s·∫£n ph·∫©m n√†y. Ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω. S·∫Ω mua th√™m.',
    'S·∫£n ph·∫©m nh∆∞ m√¥ t·∫£, ch·∫•t l∆∞·ª£ng t·ªët. Giao h√†ng nhanh, ƒë√≥ng g√≥i ƒë·∫πp.',
    'Ch·∫•t l∆∞·ª£ng v∆∞·ª£t mong ƒë·ª£i. Gi√° c·∫£ ph·∫£i chƒÉng, d·ªãch v·ª• t·ªët. ƒê√°ng tin c·∫≠y.',
    'S·∫£n ph·∫©m ƒë·∫πp, ch·∫•t l∆∞·ª£ng cao. Giao h√†ng nhanh, nh√¢n vi√™n th√¢n thi·ªán.',
    'R·∫•t h√†i l√≤ng v·ªõi tr·∫£i nghi·ªám mua s·∫Øm. S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng, gi√° h·ª£p l√Ω.',
    'S·∫£n ph·∫©m t·ªët, ƒë√∫ng nh∆∞ h√¨nh. Ch·∫•t l∆∞·ª£ng ·ªïn ƒë·ªãnh, s·∫Ω mua l·∫°i.',
    'Giao h√†ng nhanh, s·∫£n ph·∫©m ƒë·∫πp. Ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ ph·∫£i chƒÉng.',
    'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao, ƒë√°ng mua. D·ªãch v·ª• kh√°ch h√†ng t·ªët.',
    'Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m xu·∫•t s·∫Øc. Gi√° c·∫£ h·ª£p l√Ω, giao h√†ng nhanh.',
    'S·∫£n ph·∫©m ƒë·∫πp v√† ch·∫•t l∆∞·ª£ng. ƒê√≥ng g√≥i c·∫©n th·∫≠n, d·ªãch v·ª• t·ªët.'
  ];

  const sampleImages = [
    'https://images.unsplash.com/photo-1512436991641-6745cdb1723f?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1517841905240-472988babdf9?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1469398715555-76331a6c7c9b?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1517260911205-8a3b66e07b64?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1519864600265-abb23847ef2c?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1519741497674-611481863552?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1503342217505-b0a15ec3261c?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1465101046530-73398c7f28ca?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1519125323398-675f0ddb6308?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1465101178521-c1a9136a3b99?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1506744038136-46273834b3fb?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1519985176271-adb1088fa94c?fit=crop&w=400&q=80',
    'https://images.unsplash.com/photo-1526178613658-3f1622045557?fit=crop&w=400&q=80'
  ];

  for (const productId of productIds) {
    // T·∫°o s·ªë l∆∞·ª£ng review ng·∫´u nhi√™n cho m·ªói s·∫£n ph·∫©m (2-8 reviews)
    const reviewCount = faker.number.int({ min: 2, max: 8 });

    for (let i = 0; i < reviewCount; i++) {
      const userId = faker.helpers.arrayElement(userIds);
      const rating = faker.number.int({ min: 1, max: 5 });
      const isVerifiedPurchase = faker.datatype.boolean({ probability: 0.7 }); // 70% l√† verified purchase
      const isApproved = faker.datatype.boolean({ probability: 0.9 }); // 90% ƒë∆∞·ª£c approve
      const helpfulCount = faker.number.int({ min: 0, max: 15 });

      // T·∫°o 0-3 ·∫£nh cho m·ªói review
      const imageCount = faker.number.int({ min: 0, max: 3 });
      const reviewImages = [];

      for (let j = 0; j < imageCount; j++) {
        reviewImages.push({
          image_url: faker.helpers.arrayElement(sampleImages)
        });
      }

      reviews.push({
        review: {
          product_id: productId,
          user_id: userId,
          order_id: isVerifiedPurchase ? faker.number.int({ min: 1, max: 1000 }) : null,
          rating,
          title: faker.helpers.arrayElement(reviewTitles),
          content: faker.helpers.arrayElement(reviewContents),
          is_verified_purchase: isVerifiedPurchase,
          is_approved: isApproved,
          helpful_count: helpfulCount
        },
        images: reviewImages
      });
    }
  }

  return reviews;
};

// T·∫°o d·ªØ li·ªáu gi·∫£ cho reply
const generateReplies = (reviewIds, userIds, repliesPerReview = 2) => {
  const replies = [];
  const replyContents = [
    'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i!',
    'Ch√∫ng t√¥i r·∫•t vui khi b·∫°n h√†i l√≤ng v·ªõi s·∫£n ph·∫©m.',
    'C·∫£m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n, ch√∫ng t√¥i s·∫Ω c·∫£i thi·ªán h∆°n n·ªØa.',
    'R·∫•t vui khi s·∫£n ph·∫©m ƒë√°p ·ª©ng ƒë∆∞·ª£c mong ƒë·ª£i c·ªßa b·∫°n.',
    'C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† mua s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i.',
    'Ch√∫ng t√¥i s·∫Ω ti·∫øp t·ª•c n·ªó l·ª±c ƒë·ªÉ mang ƒë·∫øn s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng.',
    'C·∫£m ∆°n ƒë√°nh gi√° t√≠ch c·ª±c c·ªßa b·∫°n!',
    'R·∫•t vui khi b·∫°n th√≠ch s·∫£n ph·∫©m n√†y.',
    'Ch√∫ng t√¥i tr√¢n tr·ªçng ph·∫£n h·ªìi c·ªßa b·∫°n.',
    'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª tr·∫£i nghi·ªám mua s·∫Øm.',
    'Ch√∫ng t√¥i s·∫Ω c·ªë g·∫Øng ph·ª•c v·ª• b·∫°n t·ªët h∆°n n·ªØa.',
    'R·∫•t vui khi s·∫£n ph·∫©m l√†m b·∫°n h√†i l√≤ng.',
    'C·∫£m ∆°n s·ª± ·ªßng h·ªô c·ªßa b·∫°n!',
    'Ch√∫ng t√¥i s·∫Ω ti·∫øp t·ª•c c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng.',
    'R·∫•t vui khi b·∫°n c√≥ tr·∫£i nghi·ªám t·ªët v·ªõi s·∫£n ph·∫©m.',
    'C·∫£m ∆°n ƒë√°nh gi√° chi ti·∫øt c·ªßa b·∫°n.',
    'Ch√∫ng t√¥i tr√¢n tr·ªçng m·ªçi ph·∫£n h·ªìi t·ª´ kh√°ch h√†ng.',
    'R·∫•t vui khi s·∫£n ph·∫©m ƒë√°p ·ª©ng ƒë∆∞·ª£c nhu c·∫ßu c·ªßa b·∫°n.',
    'C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng ch√∫ng t√¥i.',
    'Ch√∫ng t√¥i s·∫Ω n·ªó l·ª±c h∆°n n·ªØa ƒë·ªÉ ph·ª•c v·ª• b·∫°n t·ªët nh·∫•t.'
  ];

  for (const reviewId of reviewIds) {
    // T·∫°o 0-3 reply cho m·ªói review
    const replyCount = faker.number.int({ min: 0, max: 3 });

    for (let i = 0; i < replyCount; i++) {
      const userId = faker.helpers.arrayElement(userIds);

      replies.push({
        review_id: reviewId,
        user_id: userId,
        content: faker.helpers.arrayElement(replyContents)
      });
    }
  }

  return replies;
};

export const seedReviews = async (reviewsPerProduct = 5) => {
  try {
    console.log('üå± Starting review seeding...');

    // L·∫•y danh s√°ch s·∫£n ph·∫©m v√† ng∆∞·ªùi d√πng
    const products = await Product.findAll({ attributes: ['id'] });
    const users = await User.findAll({ attributes: ['id'] });

    if (products.length === 0) {
      console.log('‚ö†Ô∏è No products found. Please run product seeder first.');
      return;
    }

    if (users.length === 0) {
      console.log('‚ö†Ô∏è No users found. Please run user seeder first.');
      return;
    }

    const productIds = products.map(p => p.id);
    const userIds = users.map(u => u.id);

    console.log(`üì¶ Found ${productIds.length} products`);
    console.log(`üë• Found ${userIds.length} users`);

    // T·∫°o reviews
    const reviewsData = generateReviews(productIds, userIds, reviewsPerProduct);
    console.log(`üìù Generating ${reviewsData.length} reviews...`);

    const createdReviews = [];
    const createdReviewImages = [];
    const reviewIds = [];

    for (const reviewData of reviewsData) {
      // T·∫°o review
      const review = await ProductReview.create(reviewData.review);
      createdReviews.push(review);
      reviewIds.push(review.review_id);

      // T·∫°o ·∫£nh cho review
      if (reviewData.images.length > 0) {
        const images = reviewData.images.map(img => ({
          review_id: review.review_id,
          image_url: img.image_url
        }));

        const createdImages = await ProductReviewImage.bulkCreate(images);
        createdReviewImages.push(...createdImages);
      }
    }

    console.log(`‚úÖ Created ${createdReviews.length} reviews`);
    console.log(`‚úÖ Created ${createdReviewImages.length} review images`);

    // T·∫°o replies cho m·ªôt s·ªë review
    const repliesData = generateReplies(reviewIds, userIds, 2);
    console.log(`üí¨ Generating ${repliesData.length} replies...`);

    const createdReplies = await ProductReviewReply.bulkCreate(repliesData);
    console.log(`‚úÖ Created ${createdReplies.length} replies`);

    // Th·ªëng k√™
    const totalReviews = await ProductReview.count();
    const totalImages = await ProductReviewImage.count();
    const totalReplies = await ProductReviewReply.count();
    const approvedReviews = await ProductReview.count({ where: { is_approved: true } });
    const verifiedPurchases = await ProductReview.count({ where: { is_verified_purchase: true } });

    console.log('\nüìä Review Seeding Statistics:');
    console.log(`   Total Reviews: ${totalReviews}`);
    console.log(`   Approved Reviews: ${approvedReviews}`);
    console.log(`   Verified Purchases: ${verifiedPurchases}`);
    console.log(`   Review Images: ${totalImages}`);
    console.log(`   Review Replies: ${totalReplies}`);

    // Th·ªëng k√™ rating
    const ratingStats = await ProductReview.findAll({
      attributes: [
        'rating',
        [sequelize.fn('COUNT', sequelize.col('review_id')), 'count']
      ],
      group: ['rating'],
      order: [['rating', 'ASC']]
    });

    console.log('\n‚≠ê Rating Distribution:');
    ratingStats.forEach(stat => {
      console.log(`   ${stat.rating} stars: ${stat.dataValues.count} reviews`);
    });

    console.log('‚úÖ Review seeding completed successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding reviews:', error);
    throw error;
  }
};

// H√†m ƒë·ªÉ ch·∫°y ri√™ng l·∫ª
export const runReviewSeeder = async () => {
  try {
    await seedReviews(5); // 5 reviews per product
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error running review seeder:', error);
    process.exit(1);
  }
};

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  runReviewSeeder();
} 